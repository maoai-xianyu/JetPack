// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript { ScriptHandler scriptHandler ->
    // 扩展属性
    ext.kotlin_version = "1.4.32"
    // 配置工程的仓库地址
    repositories {
        google()
        mavenCentral()
        jcenter()
        maven { url 'https://jitpack.io' }
    }
    // 配置工程的"插件"依赖地址
    dependencies {
        classpath "com.android.tools.build:gradle:3.6.4"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
        jcenter()
        maven { url 'https://jitpack.io' }
    }
}

/*subprojects {
    // 为子工程配置属性，但是会在每个子工程都创建一遍，所以改下面方式
    ext {
        compileSdkVersion = 30
        buildToolsVersion = '29.0.3'
    }
}*/

//扩展属性
ext {
    compileSdkVersion = 30
    buildToolsVersion = '29.0.3'
    minSdkVersion = 21
    targetSdkVersion = 30
    kotlin_version = '1.4.32'
    androidXVersion = '1.2.0'
    androidXMaterial = '1.2.0'
    lifecycle_version = "2.2.0"
    googleAutoServiceDependency = 'com.google.auto.service:auto-service:1.0'
}


apply from: 'common.gradle'
//apply from: this.file('common.gradle')

task clean(type: Delete) {
    println "clean  --- 执行"
    delete rootProject.buildDir
}

/**
 * 配置阶段开始前的监听回调
 */
this.beforeEvaluate {
    println "beforeEvaluate 配置阶段执行前..."
}

/**
 * 配置阶段完成以后回调
 */
this.afterEvaluate {
    println "afterEvaluate 配置阶段执行完毕..."
}

/**
 * gradle执行完毕后的回调监听
 */
this.gradle.buildFinished {
    println "gradle.buildFinished 执行阶段执行完毕..."
}

// 等同于 beforeEvaluate
this.gradle.beforeProject {
    println "gradle.beforeProject 配置执行前..."
}

// 等同于 afterEvaluate
this.gradle.afterProject {
    println "gradle.afterProject 配置执行结束..."
}

// 添加监听
// this.gradle.addListener()


/**
 * project相关api讲解
 */
//this.getProject()
//this.getSubProject()

def getProject() {
    println '------------'
    println 'Root project'
    println '------------'
    this.getAllprojects().eachWithIndex { Project project, int index ->

        if (index == 0) {
            println "Root project :${project.name}"
        } else {
            println "+--- project :${project.name}"
        }
    }
}

// 获取子project
def getSubProject() {
    println '------------'
    println 'Sub project'
    println '------------'
    this.getSubprojects().eachWithIndex { Project project, int index ->
        println "+--- project :${project.name}"
    }
}

//this.getParentProject()

// 获取父 project
def getParentProject() {
    def parent = this.getParent().name
    println "Parent project ${parent}"
}

//this.getRootPro()
// 获取 root name
def getRootPro() {
    def name = this.getRootProject().name
    println "the root project is : ${name}"
}

// 给子类添加 属性, 这样添加，可以之后可以删除 app 下的 build.gradle 中的配置
// 一般不这样做
project('app') { Project project ->
    apply plugin: 'com.android.application'
}

project('base') { Project project ->
    apply plugin: 'com.android.library'
}

// 配置当前结点工程和其subproject的所有的project
allprojects {
    group 'com.imooc'
    version '1.0.0-release'
}


println "common - group ${project('common').group}"


// 不包括当前结点工程，只包含它的subproject
subprojects { Project project ->
    if (project.plugins.hasPlugin('com.android.library')) {
        // 所有的库工程 引入maven的上传功能
        apply from: '../publishToMaven.gradle'
    }
}


println "the root file path is " + getRootDir().absolutePath
println "the build file path is " + getBuildDir().absolutePath
println "the project path is " + getProjectDir().absolutePath


//println "--- 文件内容 ${getContent('common.gradle')}"

def getContent(String path) {
    try {

        def file = file(path)
        // 相当于当前的project工成开始查找
        return file.text

    } catch (GradleException e) {
        println "file not found.."
    }
    return null
}
