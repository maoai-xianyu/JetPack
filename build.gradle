// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    ext.kotlin_version = "1.4.32"
    repositories {
        google()
        mavenCentral()
        jcenter()
        maven { url 'https://jitpack.io' }
    }
    dependencies {
        classpath "com.android.tools.build:gradle:3.6.4"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
        jcenter()
        maven { url 'https://jitpack.io' }
    }
}

ext {
    compileSdkVersion = 30
    buildToolsVersion = '29.0.3'
    minSdkVersion = 21
    targetSdkVersion = 30
    kotlin_version = '1.4.32'
    androidXVersion = '1.2.0'
    androidXMaterial = '1.2.0'
    lifecycle_version = "2.2.0"
    googleAutoServiceDependency = 'com.google.auto.service:auto-service:1.0'
}


task clean(type: Delete) {
    delete rootProject.buildDir
}

/**
 * 配置阶段开始前的监听回调
 */
this.beforeEvaluate {
    println "beforeEvaluate 配置阶段执行前..."
}

/**
 * 配置阶段完成以后回调
 */
this.afterEvaluate {
    println "afterEvaluate 配置阶段执行完毕..."
}

/**
 * gradle执行完毕后的回调监听
 */
this.gradle.buildFinished {
    println "gradle.buildFinished 执行阶段执行完毕..."
}

// 等同于 beforeEvaluate
this.gradle.beforeProject {
    println "gradle.beforeProject 配置执行前..."
}

// 等同于 afterEvaluate
this.gradle.afterProject {
    println "gradle.afterProject 配置执行结束..."
}

// 添加监听
// this.gradle.addListener()


/**
 * project相关api讲解
 */
//this.getProject()
//this.getSubProject()

def getProject() {
    println '------------'
    println 'Root project'
    println '------------'
    this.getAllprojects().eachWithIndex { Project project, int index ->

        if (index == 0) {
            println "Root project :${project.name}"
        }else {
            println "+--- project :${project.name}"
        }
    }
}

// 获取子project
def getSubProject() {
    println '------------'
    println 'Sub project'
    println '------------'
    this.getSubprojects().eachWithIndex { Project project, int index ->
        println "+--- project :${project.name}"
    }
}

//this.getParentProject()

// 获取父 project
def getParentProject() {
    def parent = this.getParent().name
    println "Parent project ${parent}"
}

//this.getRootPro()
// 获取 root name
def getRootPro(){
    def name = this.getRootProject().name
    println "the root project is : ${name}"
}

