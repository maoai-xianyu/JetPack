apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

//apply from: "$rootProject.projectDir/buildScript/common.gradle"

android {
    compileSdkVersion mCompileSdkVersion.toInteger()
    buildToolsVersion rootProject.buildToolsVersion

    defaultConfig {
        applicationId "com.mao.jetpack"
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"


        javaCompileOptions {
            annotationProcessorOptions
                    {
                        // 指定数据库 schema 文件的到导出位置
                        arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
                    }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    dataBinding {
        enabled true
    }

    viewBinding {
        enabled true
    }

}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$rootProject.kotlin_version"
    implementation "androidx.appcompat:appcompat:$rootProject.androidXVersion"
    implementation "com.google.android.material:material:$rootProject.androidXMaterial"
    implementation('androidx.core:core-ktx:1.6.0') {
        force = true
    }
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.3.5'
    implementation 'androidx.navigation:navigation-ui-ktx:2.3.5'
    // viewModel
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.3.5'
    implementation 'androidx.navigation:navigation-ui-ktx:2.3.5'
    implementation 'androidx.lifecycle:lifecycle-common-java8:2.4.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    implementation "org.apache.commons:commons-lang3:3.12.0"

    // room
    //implementation 'android.arch.persistence.room:runtime:1.1.1'
    //annotationProcessor 'android.arch.persistence.room:compiler:1.1.1'

    implementation 'androidx.room:room-runtime:2.3.0'
    kapt 'androidx.room:room-compiler:2.3.0'
    implementation 'androidx.room:room-rxjava2:2.3.0'
    implementation 'androidx.room:room-guava:2.3.0'
    testImplementation 'androidx.room:room-testing:2.3.0'

    implementation 'com.akexorcist:round-corner-progress-bar:2.1.2'

    // 轮子哥 shapeView
    /*implementation 'com.github.getActivity:ShapeView:6.0'*/

    //implementation 'com.github.lihangleo2:ShadowLayout:3.2.3'

    implementation 'com.github.bumptech.glide:glide:3.8.0'
    implementation 'jp.wasabeef:glide-transformations:2.0.1'
    implementation 'com.squareup.picasso:picasso:2.8'

    implementation project(':webview')



    //滑动关闭Activity库
    implementation rootProject.ext.dependence.libAndfix
}

// 文件拷贝
/*copy {
    from file('youdo.jks')
    into getRootProject().getBuildDir()
}*/

//文件夹的拷贝
copy {
    from file('build/outputs/apk')
    into getRootProject().getBuildDir().path + '/apk'
    // 排除不想要的文件
    exclude {

    }
    // 重命名
    rename {

    }
}


// 对文件树进行遍历
fileTree('build/outputs/apk/') { FileTree fileTree ->

    fileTree.visit { FileTreeElement element ->
        //element 是文件树中的每一个节点
        println ' the file name is : ' + element.file.name
        copy {
            from element.file
            into getRootProject().getBuildDir().path + '/test'
        }
    }

}

// 新建task

task(helloTask, {
    println "i am hello task"
})

task helleTask {
    println "i am helle task"
}

this.tasks.create(name: 'helloTask2') {
    println "i am helleTask2"
}


task helloTask3(group: 'coding', description: 'task Study') {
    println "helloTask3 分组 在 coding"
    // 推荐用法
    //可以多次调用
    doFirst {
        println 'doFirst the task group is: ' + group
    }
    //可以多次调用
    doLast {
        println 'doLast the task group is: ' + group
    }
}

this.helloTask3.doFirst {
    println '外面调用 doFirst the task group is: ' + description
}


this.tasks.create(name: "helloTask4") {
    setGroup('coding')
    setDescription('task Study')
    println 'helloTask4 分组 在 coding"'
}

// 统计打包市场

def startBuildTime, endBuildTime

this.afterEvaluate {
    // 保证要找的task已经配置完毕
    def preBuild = this.project.tasks.getByName('preBuild')
    preBuild.doFirst {
        startBuildTime = System.currentTimeMillis()
        println "preBuild 构建开始 start time is ${startBuildTime}"
    }

    def build = this.project.tasks.getByName('build')
    build.doLast {
        endBuildTime = System.currentTimeMillis()
        println "build 构建完成 end time is ${endBuildTime}"
        println "build 构建完成 buid time is ${endBuildTime - startBuildTime}"
    }
}


task taskX {
    doLast {
        println "taskX 执行"
    }
}

task taskY {
    doLast {
        println "taskY 执行"
    }
}


task taskZ {
    dependsOn this.tasks.findAll {
        return it.name.startsWith('lib')
    }

    this.tasks.findAll { task ->
        def with = task.name.startsWith('testlib')
        println "---${with}"
    }

    def name = this.tasks.findByName('testlib1')

    println "lib1 ---${name}"

    doLast {
        println "taskZ 执行"
    }
}

// 依赖多个
task taskM(dependsOn: [taskX,taskY]) {
    // 动态依赖 lib开头的库，类似于依赖库工程的基础task
    dependsOn this.tasks.findAll { task ->
        return task.name.startsWith('lib')
    }

    doLast {
        println "taskM 执行"
    }
}


task lib1 {
    doLast {
        println "lib1 执行"
    }
}

task lib2 {
    doLast {
        println "lib2 执行"
    }
}

task nolib2 {
    doLast {
        println "nolib2 执行"
    }
}

this.tasks.create(name:'testlib1') {
    doLast {
        println "testlib1 执行"
    }
}


this.tasks.create(name:'testlib2') {
    doLast {
        println "testlib2 执行"
    }
}

